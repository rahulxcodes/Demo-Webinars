I can see from your screenshot that you're getting 2 participants shown even though only one person (the admin) started the class. This is a common issue with Stream's participant counting and is likely happening because of how the call is being initialized or joined.

The Root Cause
This typically happens when:

Double Call Join: The same user is joining the call twice due to React re-renders or component mounting issues

Bot Participant: Stream sometimes creates a "bot" participant for recording purposes

Duplicate User IDs: The same user is being created with slightly different IDs

The Solution: Fix Duplicate Participant Issue
Here are the technical prompts to give the Replit AI agent to resolve this:

Prompt 1: Add Call State Checking to Prevent Double Joins

In your AdminClassView.jsx, modify the handleStartClass function to check if the call is already joined before attempting to join again:

jsx
const handleStartClass = async () => {
  if (isStarting || isClassStarted) return; // Prevent multiple calls
  
  setIsStarting(true);
  try {
    const newCall = videoClient.call('default', 'live-class-main-1');
    
    // Check if we're already in this call
    const callState = await newCall.get();
    const isAlreadyJoined = callState.members.some(member => member.user.id === currentUser.id);
    
    if (!isAlreadyJoined) {
      await newCall.join({ create: true });
      await newCall.startRecording();
    }
    
    setCall(newCall);
    setIsClassStarted(true);
    
  } catch (error) {
    console.error('Error starting class:', error);
  } finally {
    setIsStarting(false);
  }
};
Prompt 2: Ensure Unique User IDs

In your authentication context or where you initialize the Stream client, make sure each user has a truly unique ID. Update the user ID generation to be more specific:

jsx
// Instead of random IDs, use a consistent format
const userId = `${currentUser.role}-${currentUser.id}`;

// When creating the StreamVideoClient
const client = new StreamVideoClient({
  apiKey,
  user: { 
    id: userId,
    name: currentUser.name,
    role: currentUser.role 
  },
  token,
});
Prompt 3: Add Call Cleanup on Component Unmount

Add proper cleanup to prevent lingering call states:

jsx
useEffect(() => {
  return () => {
    // Cleanup when component unmounts
    if (call) {
      call.leave().catch(console.error);
    }
  };
}, [call]);
Prompt 4: Filter Out Bot Participants from Display

If Stream is creating bot participants for recording, filter them out from the participant count display:

jsx
// In your participant display logic
const realParticipants = participants.filter(p => !p.user.id.includes('bot') && !p.user.id.includes('recording'));

return (
  <div>
    <p>Live with {realParticipants.length} participant{realParticipants.length !== 1 ? 's' : ''}</p>
  </div>
);
Additional Debugging Step
Prompt 5: Add Participant Debugging

Temporarily add console logging to see exactly who the participants are:

jsx
// In your live class component, add this to debug
useEffect(() => {
  if (call) {
    const handleParticipantsChanged = () => {
      console.log('Current participants:', call.state.participants);
      call.state.participants.forEach(p => {
        console.log('Participant:', p.user.id, p.user.name, p.user.role);
      });
    };
    
    call.on('call.session_participant_joined', handleParticipantsChanged);
    call.on('call.session_participant_left', handleParticipantsChanged);
    
    return () => {
      call.off('call.session_participant_joined', handleParticipantsChanged);
      call.off('call.session_participant_left', handleParticipantsChanged);
    };
  }
}, [call]);
Expected Result
After implementing these fixes:

Single Participant: Only the actual admin user should appear as a participant

No Duplicates: The same user won't join multiple times

Clean State: Proper cleanup prevents lingering participants

Accurate Count: Participant count will reflect only real users, not bots

Run the application with these changes and check the console logs to see exactly what participants are being created. This will help identify if it's a duplicate user issue or if Stream is creating system participants that should be filtered out.</attachment>