Stabilize the AdminClassView Props and State

Go to src/components/AdminClassView.tsx. We will refactor it to be self-contained and robust, ensuring it correctly handles its own state and doesn't rely on potentially broken parent logic.

Remove any logic trying to derive videoClient from the call object. The videoClient should be passed in as a prop.

The component should manage its own call object in its state.

Refactor the handleStartClass function to be clean and reliable.

Here is the corrected code structure:

tsx
// In src/components/AdminClassView.tsx
import { useState, useEffect } from 'react';
import { StreamVideo, StreamCall, ... } from '@stream-io/video-react-sdk';

// The component receives the videoClient and currentUser as props
export default function AdminClassView({ videoClient, currentUser }) {
  const [call, setCall] = useState(null);
  const [isStarting, setIsStarting] = useState(false);

  const handleStartClass = async () => {
    if (isStarting || call) return; // Prevent re-starting

    setIsStarting(true);
    try {
      // Create a new call instance using the passed-in videoClient
      const newCall = videoClient.call('default', 'live-class-main-1');
      await newCall.getOrCreate(); // Ensure the call exists
      await newCall.join();

      setCall(newCall); // Set the created call into our state
    } catch (error) {
      console.error("Failed to start class:", error);
      alert("Could not start the class. Please check the console.");
    } finally {
      setIsStarting(false);
    }
  };

  // Render the "Start Class" button if the call hasn't been created yet
  if (!call) {
    return (
      <div>
        <button onClick={handleStartClass} disabled={isStarting}>
          {isStarting ? 'Starting...' : 'Start Class'}
        </button>
      </div>
    );
  }

  // If the call exists, render the full video UI
  return (
    <StreamVideo client={videoClient}>
      <StreamCall call={call}>
        {/* Your rich UI layout from before (StreamTheme, SpeakerLayout, etc.) */}
      </StreamCall>
    </StreamVideo>
  );
}