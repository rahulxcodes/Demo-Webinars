// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("attendee")
  createdAt DateTime @default(now())

  @@map("users")
}

model Webinar {
  id          String   @id @default(cuid())
  hostId      String
  title       String
  description String?
  startTime   DateTime
  duration    Int      @default(60)
  status      String   @default("upcoming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  registrationForm RegistrationForm?
  registrations    Registration[]

  // Performance indexes for faster queries
  @@index([hostId])
  @@index([startTime])
  @@index([status])
  @@index([createdAt])
  @@index([hostId, startTime])
  @@index([status, startTime])
  @@map("webinars")
}

model RegistrationForm {
  id                   String   @id @default(cuid())
  webinarId            String   @unique
  requireRegistration  Boolean  @default(true)
  autoApprove          Boolean  @default(true)
  maxAttendees         Int?
  registrationDeadline Int?     // hours before webinar
  formSchema           Json     // stores form field configuration
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  webinar       Webinar        @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@index([webinarId])
  @@map("registration_forms")
}

model Registration {
  id            String    @id @default(cuid())
  webinarId     String
  formId        String
  userEmail     String
  userName      String
  mobileNumber  String?
  formResponses Json      // stores all form field responses
  status        String    @default("pending") // pending, approved, rejected
  joinToken     String    @unique @default(cuid())
  sourceData    Json?     // UTM parameters, referrer info
  registeredAt  DateTime  @default(now())
  approvedAt    DateTime?

  // Relations
  webinar          Webinar          @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  registrationForm RegistrationForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  // Prevent duplicate registrations
  @@unique([webinarId, userEmail])
  @@index([webinarId])
  @@index([formId])
  @@index([status])
  @@index([userEmail])
  @@map("registrations")
}