// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Updated User model with authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  role          Role      @default(ATTENDEE)
  profileData   Json?
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  hostedWebinars Webinar[] @relation("WebinarHost")
  registrations Registration[]

  @@map("users")
}

enum Role {
  ADMIN
  HOST
  CO_HOST
  PANELIST
  ATTENDEE
}

model Webinar {
  id              String   @id @default(cuid())
  hostId          String
  title           String
  slug            String   @unique
  streamCallId    String   @unique
  description     String?
  timezone        String   @default("UTC")
  startTime       DateTime
  duration        Int      @default(60)
  isRecurring     Boolean  @default(false)
  recurrenceRule  Json?
  requireRegistration Boolean @default(true)
  registrationDeadline Int?
  maxAttendees    Int?
  capacity        Int?
  status          String   @default("scheduled")
  streamStatus    String   @default("created")
  settings        Json?
  demoAttendanceThreshold Int @default(600)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  host             User             @relation("WebinarHost", fields: [hostId], references: [id])
  registrationForm RegistrationForm?
  registrations    Registration[]

  // Performance indexes for faster queries
  @@index([hostId])
  @@index([startTime])
  @@index([status])
  @@index([streamCallId])
  @@index([slug])
  @@index([createdAt])
  @@index([hostId, startTime])
  @@index([status, startTime])
  @@map("webinars")
}

model RegistrationForm {
  id                   String   @id @default(cuid())
  webinarId            String   @unique
  requireRegistration  Boolean  @default(true)
  autoApprove          Boolean  @default(true)
  maxAttendees         Int?
  registrationDeadline Int?     // hours before webinar
  formSchema           Json     // stores form field configuration
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  webinar       Webinar        @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@index([webinarId])
  @@map("registration_forms")
}

model Registration {
  id            String    @id @default(cuid())
  webinarId     String
  formId        String
  userId        String?   // Optional link to authenticated user
  userEmail     String
  userName      String
  mobileNumber  String?
  formResponses Json      // stores all form field responses
  status        String    @default("pending") // pending, approved, rejected
  joinToken     String    @unique @default(cuid())
  sourceData    Json?     // UTM parameters, referrer info
  registeredAt  DateTime  @default(now())
  approvedAt    DateTime?

  // Relations
  user             User?            @relation(fields: [userId], references: [id])
  webinar          Webinar          @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  registrationForm RegistrationForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  // Prevent duplicate registrations
  @@unique([webinarId, userEmail])
  @@index([webinarId])
  @@index([formId])
  @@index([status])
  @@index([userEmail])
  @@index([userId])
  @@map("registrations")
}